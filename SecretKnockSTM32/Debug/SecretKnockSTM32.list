
SecretKnockSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db0  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001f80  08001f80  00002f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fb8  08001fb8  00003024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001fb8  08001fb8  00003024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001fb8  08001fb8  00003024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fb8  08001fb8  00002fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fbc  08001fbc  00002fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08001fc0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000024  08001fe4  00003024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001fe4  000030a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000461e  00000000  00000000  0000304d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001320  00000000  00000000  0000766b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00008990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003c9  00000000  00000000  00008ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000102ff  00000000  00000000  00009289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006662  00000000  00000000  00019588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000631ed  00000000  00000000  0001fbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00082dd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012e8  00000000  00000000  00082e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00084104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000024 	.word	0x20000024
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001f68 	.word	0x08001f68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000028 	.word	0x20000028
 800020c:	08001f68 	.word	0x08001f68

08000210 <Read_Piezo_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_Piezo_ADC(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
    uint32_t value = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 800021a:	480b      	ldr	r0, [pc, #44]	@ (8000248 <Read_Piezo_ADC+0x38>)
 800021c:	f000 fc7a 	bl	8000b14 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000220:	210a      	movs	r1, #10
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <Read_Piezo_ADC+0x38>)
 8000224:	f000 fd16 	bl	8000c54 <HAL_ADC_PollForConversion>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d103      	bne.n	8000236 <Read_Piezo_ADC+0x26>
        value = HAL_ADC_GetValue(&hadc1);
 800022e:	4806      	ldr	r0, [pc, #24]	@ (8000248 <Read_Piezo_ADC+0x38>)
 8000230:	f000 fe16 	bl	8000e60 <HAL_ADC_GetValue>
 8000234:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 8000236:	4804      	ldr	r0, [pc, #16]	@ (8000248 <Read_Piezo_ADC+0x38>)
 8000238:	f000 fce0 	bl	8000bfc <HAL_ADC_Stop>
    return value;
 800023c:	687b      	ldr	r3, [r7, #4]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000040 	.word	0x20000040

0800024c <knockDelay>:

void knockDelay(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
    for (int i = 0; i < knockFadeTime / 20; i++) {
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	e00a      	b.n	800026e <knockDelay+0x22>
        HAL_Delay(10);
 8000258:	200a      	movs	r0, #10
 800025a:	f000 fb5f 	bl	800091c <HAL_Delay>
        Read_Piezo_ADC();
 800025e:	f7ff ffd7 	bl	8000210 <Read_Piezo_ADC>
        HAL_Delay(10);
 8000262:	200a      	movs	r0, #10
 8000264:	f000 fb5a 	bl	800091c <HAL_Delay>
    for (int i = 0; i < knockFadeTime / 20; i++) {
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3301      	adds	r3, #1
 800026c:	607b      	str	r3, [r7, #4]
 800026e:	2396      	movs	r3, #150	@ 0x96
 8000270:	4a06      	ldr	r2, [pc, #24]	@ (800028c <knockDelay+0x40>)
 8000272:	fb82 1203 	smull	r1, r2, r2, r3
 8000276:	10d2      	asrs	r2, r2, #3
 8000278:	17db      	asrs	r3, r3, #31
 800027a:	1ad3      	subs	r3, r2, r3
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	429a      	cmp	r2, r3
 8000280:	dbea      	blt.n	8000258 <knockDelay+0xc>
    }
}
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	66666667 	.word	0x66666667

08000290 <listenToSecretKnock>:

void listenToSecretKnock(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
    memset(knockReadings, 0, sizeof(knockReadings));
 8000296:	2228      	movs	r2, #40	@ 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4826      	ldr	r0, [pc, #152]	@ (8000334 <listenToSecretKnock+0xa4>)
 800029c:	f001 fe38 	bl	8001f10 <memset>
    int currentKnockNumber = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
    uint32_t startTime = HAL_GetTick();
 80002a4:	f000 fb30 	bl	8000908 <HAL_GetTick>
 80002a8:	60b8      	str	r0, [r7, #8]
    uint32_t now = HAL_GetTick();
 80002aa:	f000 fb2d 	bl	8000908 <HAL_GetTick>
 80002ae:	6078      	str	r0, [r7, #4]

    do {
        knockSensorValue = Read_Piezo_ADC();
 80002b0:	f7ff ffae 	bl	8000210 <Read_Piezo_ADC>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000338 <listenToSecretKnock+0xa8>)
 80002ba:	601a      	str	r2, [r3, #0]
        if (knockSensorValue > threshold) {
 80002bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000338 <listenToSecretKnock+0xa8>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b1e      	ldr	r3, [pc, #120]	@ (800033c <listenToSecretKnock+0xac>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	dd13      	ble.n	80002f0 <listenToSecretKnock+0x60>
            now = HAL_GetTick();
 80002c8:	f000 fb1e 	bl	8000908 <HAL_GetTick>
 80002cc:	6078      	str	r0, [r7, #4]
            knockReadings[currentKnockNumber] = now - startTime;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	b299      	uxth	r1, r3
 80002da:	4a16      	ldr	r2, [pc, #88]	@ (8000334 <listenToSecretKnock+0xa4>)
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            currentKnockNumber++;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3301      	adds	r3, #1
 80002e6:	60fb      	str	r3, [r7, #12]
            startTime = now;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	60bb      	str	r3, [r7, #8]
            knockDelay();
 80002ec:	f7ff ffae 	bl	800024c <knockDelay>
        }
        now = HAL_GetTick();
 80002f0:	f000 fb0a 	bl	8000908 <HAL_GetTick>
 80002f4:	6078      	str	r0, [r7, #4]
    } while ((now - startTime < knockComplete) && (currentKnockNumber < MAX_KNOCKS));
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	1ad3      	subs	r3, r2, r3
 80002fc:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000300:	4293      	cmp	r3, r2
 8000302:	d202      	bcs.n	800030a <listenToSecretKnock+0x7a>
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	2b13      	cmp	r3, #19
 8000308:	ddd2      	ble.n	80002b0 <listenToSecretKnock+0x20>

    if (!programModeActive) {
 800030a:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <listenToSecretKnock+0xb0>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d10a      	bne.n	8000328 <listenToSecretKnock+0x98>
        if (validateKnock()) {
 8000312:	f000 f817 	bl	8000344 <validateKnock>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d007      	beq.n	800032c <listenToSecretKnock+0x9c>
            doorUnlock(lockOperateTime);
 800031c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f8fd 	bl	8000520 <doorUnlock>
        }
    } else {
        validateKnock(); // sadece kayıt için
    }
}
 8000326:	e001      	b.n	800032c <listenToSecretKnock+0x9c>
        validateKnock(); // sadece kayıt için
 8000328:	f000 f80c 	bl	8000344 <validateKnock>
}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000070 	.word	0x20000070
 8000338:	20000098 	.word	0x20000098
 800033c:	20000014 	.word	0x20000014
 8000340:	2000009c 	.word	0x2000009c

08000344 <validateKnock>:

bool validateKnock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b08b      	sub	sp, #44	@ 0x2c
 8000348:	af00      	add	r7, sp, #0
    int maxInterval = 0, currentCount = 0, storedCount = 0, totalDifference = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	627b      	str	r3, [r7, #36]	@ 0x24
 800034e:	2300      	movs	r3, #0
 8000350:	623b      	str	r3, [r7, #32]
 8000352:	2300      	movs	r3, #0
 8000354:	61fb      	str	r3, [r7, #28]
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < MAX_KNOCKS; i++) {
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
 800035e:	e021      	b.n	80003a4 <validateKnock+0x60>
        if (knockReadings[i] > 0) currentCount++;
 8000360:	4a43      	ldr	r2, [pc, #268]	@ (8000470 <validateKnock+0x12c>)
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <validateKnock+0x2e>
 800036c:	6a3b      	ldr	r3, [r7, #32]
 800036e:	3301      	adds	r3, #1
 8000370:	623b      	str	r3, [r7, #32]
        if (secretCode[i] > 0) storedCount++;
 8000372:	4a40      	ldr	r2, [pc, #256]	@ (8000474 <validateKnock+0x130>)
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d002      	beq.n	8000384 <validateKnock+0x40>
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	3301      	adds	r3, #1
 8000382:	61fb      	str	r3, [r7, #28]
        if (knockReadings[i] > maxInterval) maxInterval = knockReadings[i];
 8000384:	4a3a      	ldr	r2, [pc, #232]	@ (8000470 <validateKnock+0x12c>)
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800038c:	461a      	mov	r2, r3
 800038e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000390:	4293      	cmp	r3, r2
 8000392:	da04      	bge.n	800039e <validateKnock+0x5a>
 8000394:	4a36      	ldr	r2, [pc, #216]	@ (8000470 <validateKnock+0x12c>)
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800039c:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < MAX_KNOCKS; i++) {
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2b13      	cmp	r3, #19
 80003a8:	ddda      	ble.n	8000360 <validateKnock+0x1c>
    }

    if (programModeActive) {
 80003aa:	4b33      	ldr	r3, [pc, #204]	@ (8000478 <validateKnock+0x134>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d01e      	beq.n	80003f0 <validateKnock+0xac>
        for (int i = 0; i < MAX_KNOCKS; i++) {
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
 80003b6:	e013      	b.n	80003e0 <validateKnock+0x9c>
            secretCode[i] = (uint8_t)((knockReadings[i] * 100) / maxInterval);
 80003b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000470 <validateKnock+0x12c>)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c0:	461a      	mov	r2, r3
 80003c2:	2364      	movs	r3, #100	@ 0x64
 80003c4:	fb03 f202 	mul.w	r2, r3, r2
 80003c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80003ce:	b2d9      	uxtb	r1, r3
 80003d0:	4a28      	ldr	r2, [pc, #160]	@ (8000474 <validateKnock+0x130>)
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	4413      	add	r3, r2
 80003d6:	460a      	mov	r2, r1
 80003d8:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < MAX_KNOCKS; i++) {
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	3301      	adds	r3, #1
 80003de:	613b      	str	r3, [r7, #16]
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	2b13      	cmp	r3, #19
 80003e4:	dde8      	ble.n	80003b8 <validateKnock+0x74>
        }
        programModeActive = 0;
 80003e6:	4b24      	ldr	r3, [pc, #144]	@ (8000478 <validateKnock+0x134>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
        return false;
 80003ec:	2300      	movs	r3, #0
 80003ee:	e039      	b.n	8000464 <validateKnock+0x120>
    }

    if (currentCount != storedCount) return false;
 80003f0:	6a3a      	ldr	r2, [r7, #32]
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d001      	beq.n	80003fc <validateKnock+0xb8>
 80003f8:	2300      	movs	r3, #0
 80003fa:	e033      	b.n	8000464 <validateKnock+0x120>

    for (int i = 0; i < MAX_KNOCKS; i++) {
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	e023      	b.n	800044a <validateKnock+0x106>
        int normalized = (knockReadings[i] * 100) / maxInterval;
 8000402:	4a1b      	ldr	r2, [pc, #108]	@ (8000470 <validateKnock+0x12c>)
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800040a:	461a      	mov	r2, r3
 800040c:	2364      	movs	r3, #100	@ 0x64
 800040e:	fb03 f202 	mul.w	r2, r3, r2
 8000412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000414:	fb92 f3f3 	sdiv	r3, r2, r3
 8000418:	60bb      	str	r3, [r7, #8]
        int diff = abs((int)secretCode[i] - normalized);
 800041a:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <validateKnock+0x130>)
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4413      	add	r3, r2
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	461a      	mov	r2, r3
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	1ad3      	subs	r3, r2, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	bfb8      	it	lt
 800042c:	425b      	neglt	r3, r3
 800042e:	607b      	str	r3, [r7, #4]
        if (diff > rejectValue) return false;
 8000430:	2219      	movs	r2, #25
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4293      	cmp	r3, r2
 8000436:	dd01      	ble.n	800043c <validateKnock+0xf8>
 8000438:	2300      	movs	r3, #0
 800043a:	e013      	b.n	8000464 <validateKnock+0x120>
        totalDifference += diff;
 800043c:	69ba      	ldr	r2, [r7, #24]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < MAX_KNOCKS; i++) {
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	2b13      	cmp	r3, #19
 800044e:	ddd8      	ble.n	8000402 <validateKnock+0xbe>
    }

    return (totalDifference / storedCount <= averageRejectValue);
 8000450:	69ba      	ldr	r2, [r7, #24]
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	fb92 f3f3 	sdiv	r3, r2, r3
 8000458:	220f      	movs	r2, #15
 800045a:	4293      	cmp	r3, r2
 800045c:	bfd4      	ite	le
 800045e:	2301      	movle	r3, #1
 8000460:	2300      	movgt	r3, #0
 8000462:	b2db      	uxtb	r3, r3
}
 8000464:	4618      	mov	r0, r3
 8000466:	372c      	adds	r7, #44	@ 0x2c
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	20000070 	.word	0x20000070
 8000474:	20000000 	.word	0x20000000
 8000478:	2000009c 	.word	0x2000009c

0800047c <main>:
/* USER CODE END 0 */

int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  HAL_Init();
 8000480:	f000 f9f3 	bl	800086a <HAL_Init>
  SystemClock_Config();
 8000484:	f000 f8fa 	bl	800067c <SystemClock_Config>
  MX_GPIO_Init();
 8000488:	f000 f862 	bl	8000550 <MX_GPIO_Init>
  MX_ADC1_Init();
 800048c:	f000 f8b4 	bl	80005f8 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2101      	movs	r1, #1
 8000494:	481d      	ldr	r0, [pc, #116]	@ (800050c <main+0x90>)
 8000496:	f001 f902 	bl	800169e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2140      	movs	r1, #64	@ 0x40
 800049e:	481b      	ldr	r0, [pc, #108]	@ (800050c <main+0x90>)
 80004a0:	f001 f8fd 	bl	800169e <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    knockSensorValue = Read_Piezo_ADC();
 80004a4:	f7ff feb4 	bl	8000210 <Read_Piezo_ADC>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <main+0x94>)
 80004ae:	601a      	str	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80004b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004b4:	4817      	ldr	r0, [pc, #92]	@ (8000514 <main+0x98>)
 80004b6:	f001 f8db 	bl	8001670 <HAL_GPIO_ReadPin>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d118      	bne.n	80004f2 <main+0x76>
      HAL_Delay(100);
 80004c0:	2064      	movs	r0, #100	@ 0x64
 80004c2:	f000 fa2b 	bl	800091c <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80004c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ca:	4812      	ldr	r0, [pc, #72]	@ (8000514 <main+0x98>)
 80004cc:	f001 f8d0 	bl	8001670 <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d10d      	bne.n	80004f2 <main+0x76>
          programModeActive = !programModeActive;
 80004d6:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <main+0x9c>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	bf0c      	ite	eq
 80004de:	2301      	moveq	r3, #1
 80004e0:	2300      	movne	r3, #0
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <main+0x9c>)
 80004e8:	701a      	strb	r2, [r3, #0]
          HAL_Delay(500);
 80004ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004ee:	f000 fa15 	bl	800091c <HAL_Delay>
      }
    }

    if (knockSensorValue > threshold) {
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <main+0x94>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <main+0xa0>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dd01      	ble.n	8000502 <main+0x86>
        listenToSecretKnock();
 80004fe:	f7ff fec7 	bl	8000290 <listenToSecretKnock>
    }

    HAL_Delay(10);
 8000502:	200a      	movs	r0, #10
 8000504:	f000 fa0a 	bl	800091c <HAL_Delay>
    knockSensorValue = Read_Piezo_ADC();
 8000508:	e7cc      	b.n	80004a4 <main+0x28>
 800050a:	bf00      	nop
 800050c:	40010c00 	.word	0x40010c00
 8000510:	20000098 	.word	0x20000098
 8000514:	40011000 	.word	0x40011000
 8000518:	2000009c 	.word	0x2000009c
 800051c:	20000014 	.word	0x20000014

08000520 <doorUnlock>:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
    }
}

void doorUnlock(uint32_t duration)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Solenoid ON
 8000528:	2201      	movs	r2, #1
 800052a:	2101      	movs	r1, #1
 800052c:	4807      	ldr	r0, [pc, #28]	@ (800054c <doorUnlock+0x2c>)
 800052e:	f001 f8b6 	bl	800169e <HAL_GPIO_WritePin>
    HAL_Delay(duration);
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f9f2 	bl	800091c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Solenoid OFF
 8000538:	2200      	movs	r2, #0
 800053a:	2101      	movs	r1, #1
 800053c:	4803      	ldr	r0, [pc, #12]	@ (800054c <doorUnlock+0x2c>)
 800053e:	f001 f8ae 	bl	800169e <HAL_GPIO_WritePin>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40010c00 	.word	0x40010c00

08000550 <MX_GPIO_Init>:
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <MX_GPIO_Init+0x9c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <MX_GPIO_Init+0x9c>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <MX_GPIO_Init+0x9c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <MX_GPIO_Init+0x9c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a1a      	ldr	r2, [pc, #104]	@ (80005ec <MX_GPIO_Init+0x9c>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <MX_GPIO_Init+0x9c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000594:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <MX_GPIO_Init+0x9c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a14      	ldr	r2, [pc, #80]	@ (80005ec <MX_GPIO_Init+0x9c>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <MX_GPIO_Init+0x9c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0310 	and.w	r3, r3, #16
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <MX_GPIO_Init+0xa0>)
 80005c2:	f000 fed1 	bl	8001368 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c6:	2301      	movs	r3, #1
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <MX_GPIO_Init+0xa4>)
 80005de:	f000 fec3 	bl	8001368 <HAL_GPIO_Init>
}
 80005e2:	bf00      	nop
 80005e4:	3720      	adds	r7, #32
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40011000 	.word	0x40011000
 80005f4:	40010c00 	.word	0x40010c00

080005f8 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 80005fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <MX_ADC1_Init+0x78>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a1b      	ldr	r2, [pc, #108]	@ (8000670 <MX_ADC1_Init+0x78>)
 8000604:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MX_ADC1_Init+0x78>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Instance = ADC1;
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x7c>)
 8000622:	4a15      	ldr	r2, [pc, #84]	@ (8000678 <MX_ADC1_Init+0x80>)
 8000624:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000626:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <MX_ADC1_Init+0x7c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x7c>)
 800062e:	2201      	movs	r2, #1
 8000630:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_ADC1_Init+0x7c>)
 8000634:	2200      	movs	r2, #0
 8000636:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_ADC1_Init+0x7c>)
 800063a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800063e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_ADC1_Init+0x7c>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_ADC1_Init+0x7c>)
 8000648:	2201      	movs	r2, #1
 800064a:	611a      	str	r2, [r3, #16]
  HAL_ADC_Init(&hadc1);
 800064c:	4809      	ldr	r0, [pc, #36]	@ (8000674 <MX_ADC1_Init+0x7c>)
 800064e:	f000 f989 	bl	8000964 <HAL_ADC_Init>

  sConfig.Channel = ADC_CHANNEL_0;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000656:	2301      	movs	r3, #1
 8000658:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_ADC1_Init+0x7c>)
 8000664:	f000 fc08 	bl	8000e78 <HAL_ADC_ConfigChannel>
}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	20000040 	.word	0x20000040
 8000678:	40012400 	.word	0x40012400

0800067c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	@ 0x40
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2228      	movs	r2, #40	@ 0x28
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc40 	bl	8001f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f80c 	bl	80016d0 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80006b8:	230f      	movs	r3, #15
 80006ba:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fa7f 	bl	8001bd4 <HAL_RCC_ClockConfig>
}
 80006d6:	bf00      	nop
 80006d8:	3740      	adds	r7, #64	@ 0x40
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <HAL_MspInit+0x5c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <HAL_MspInit+0x5c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b12      	ldr	r3, [pc, #72]	@ (800073c <HAL_MspInit+0x5c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <HAL_MspInit+0x5c>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a0e      	ldr	r2, [pc, #56]	@ (800073c <HAL_MspInit+0x5c>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <HAL_MspInit+0x5c>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000716:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <HAL_MspInit+0x60>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <HAL_MspInit+0x60>)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40021000 	.word	0x40021000
 8000740:	40010000 	.word	0x40010000

08000744 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <HAL_ADC_MspInit+0x6c>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d121      	bne.n	80007a8 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <HAL_ADC_MspInit+0x70>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <HAL_ADC_MspInit+0x70>)
 800076a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <HAL_ADC_MspInit+0x70>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <HAL_ADC_MspInit+0x70>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <HAL_ADC_MspInit+0x70>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_ADC_MspInit+0x70>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000798:	2303      	movs	r3, #3
 800079a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <HAL_ADC_MspInit+0x74>)
 80007a4:	f000 fde0 	bl	8001368 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012400 	.word	0x40012400
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010800 	.word	0x40010800

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <NMI_Handler+0x4>

080007c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <MemManage_Handler+0x4>

080007d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f86a 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000820:	f7ff fff8 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000826:	490c      	ldr	r1, [pc, #48]	@ (8000858 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000828:	4a0c      	ldr	r2, [pc, #48]	@ (800085c <LoopFillZerobss+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800083c:	4c09      	ldr	r4, [pc, #36]	@ (8000864 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084a:	f001 fb69 	bl	8001f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fe15 	bl	800047c <main>
  bx lr
 8000852:	4770      	bx	lr
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800085c:	08001fc0 	.word	0x08001fc0
  ldr r2, =_sbss
 8000860:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000864:	200000a4 	.word	0x200000a4

08000868 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_IRQHandler>

0800086a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086e:	2003      	movs	r0, #3
 8000870:	f000 fd46 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000874:	200f      	movs	r0, #15
 8000876:	f000 f805 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087a:	f7ff ff31 	bl	80006e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	bd80      	pop	{r7, pc}

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fd53 	bl	800134e <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 fd29 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	@ (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000018 	.word	0x20000018
 80008dc:	20000020 	.word	0x20000020
 80008e0:	2000001c 	.word	0x2000001c

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a03      	ldr	r2, [pc, #12]	@ (8000904 <HAL_IncTick+0x20>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	20000020 	.word	0x20000020
 8000904:	200000a0 	.word	0x200000a0

08000908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	@ (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	200000a0 	.word	0x200000a0

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff fff0 	bl	8000908 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffe0 	bl	8000908 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000020 	.word	0x20000020

08000964 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e0be      	b.n	8000b04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000990:	2b00      	cmp	r3, #0
 8000992:	d109      	bne.n	80009a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fece 	bl	8000744 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 fbb7 	bl	800111c <ADC_ConversionStop_Disable>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f040 8099 	bne.w	8000af2 <HAL_ADC_Init+0x18e>
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f040 8095 	bne.w	8000af2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80009d0:	f023 0302 	bic.w	r3, r3, #2
 80009d4:	f043 0202 	orr.w	r2, r3, #2
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7b1b      	ldrb	r3, [r3, #12]
 80009ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009fc:	d003      	beq.n	8000a06 <HAL_ADC_Init+0xa2>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d102      	bne.n	8000a0c <HAL_ADC_Init+0xa8>
 8000a06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a0a:	e000      	b.n	8000a0e <HAL_ADC_Init+0xaa>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7d1b      	ldrb	r3, [r3, #20]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d119      	bne.n	8000a50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7b1b      	ldrb	r3, [r3, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d109      	bne.n	8000a38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	035a      	lsls	r2, r3, #13
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	e00b      	b.n	8000a50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3c:	f043 0220 	orr.w	r2, r3, #32
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a48:	f043 0201 	orr.w	r2, r3, #1
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	430a      	orrs	r2, r1
 8000a62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <HAL_ADC_Init+0x1a8>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	430b      	orrs	r3, r1
 8000a76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a80:	d003      	beq.n	8000a8a <HAL_ADC_Init+0x126>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d104      	bne.n	8000a94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	051b      	lsls	r3, r3, #20
 8000a92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a9a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_ADC_Init+0x1ac>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d10b      	bne.n	8000ad0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac2:	f023 0303 	bic.w	r3, r3, #3
 8000ac6:	f043 0201 	orr.w	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ace:	e018      	b.n	8000b02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad4:	f023 0312 	bic.w	r3, r3, #18
 8000ad8:	f043 0210 	orr.w	r2, r3, #16
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae4:	f043 0201 	orr.w	r2, r3, #1
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af0:	e007      	b.n	8000b02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af6:	f043 0210 	orr.w	r2, r3, #16
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b10:	ff1f0efe 	.word	0xff1f0efe

08000b14 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_Start+0x1a>
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	e062      	b.n	8000bf4 <HAL_ADC_Start+0xe0>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2201      	movs	r2, #1
 8000b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 fa96 	bl	8001068 <ADC_Enable>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d151      	bne.n	8000bea <HAL_ADC_Start+0xd6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000b4e:	f023 0301 	bic.w	r3, r3, #1
 8000b52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	629a      	str	r2, [r3, #40]	@ 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d007      	beq.n	8000b84 <HAL_ADC_Start+0x70>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_ADC_Start+0x8a>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b94:	f023 0206 	bic.w	r2, r3, #6
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b9c:	e002      	b.n	8000ba4 <HAL_ADC_Start+0x90>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f06f 0202 	mvn.w	r2, #2
 8000bb4:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000bc0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000bc4:	d108      	bne.n	8000bd8 <HAL_ADC_Start+0xc4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	e00c      	b.n	8000bf2 <HAL_ADC_Start+0xde>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	e003      	b.n	8000bf2 <HAL_ADC_Start+0xde>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d101      	bne.n	8000c16 <HAL_ADC_Stop+0x1a>
 8000c12:	2302      	movs	r3, #2
 8000c14:	e01a      	b.n	8000c4c <HAL_ADC_Stop+0x50>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 fa7c 	bl	800111c <ADC_ConversionStop_Disable>
 8000c24:	4603      	mov	r3, r0
 8000c26:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d109      	bne.n	8000c42 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c36:	f023 0301 	bic.w	r3, r3, #1
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000c6a:	f7ff fe4d 	bl	8000908 <HAL_GetTick>
 8000c6e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00b      	beq.n	8000c96 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c82:	f043 0220 	orr.w	r2, r3, #32
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e0d3      	b.n	8000e3e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d131      	bne.n	8000d08 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000caa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d12a      	bne.n	8000d08 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000cb2:	e021      	b.n	8000cf8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cba:	d01d      	beq.n	8000cf8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <HAL_ADC_PollForConversion+0x7e>
 8000cc2:	f7ff fe21 	bl	8000908 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d212      	bcs.n	8000cf8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10b      	bne.n	8000cf8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce4:	f043 0204 	orr.w	r2, r3, #4
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e0a2      	b.n	8000e3e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0d6      	beq.n	8000cb4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d06:	e070      	b.n	8000dea <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000d08:	4b4f      	ldr	r3, [pc, #316]	@ (8000e48 <HAL_ADC_PollForConversion+0x1f4>)
 8000d0a:	681c      	ldr	r4, [r3, #0]
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f001 f8a7 	bl	8001e60 <HAL_RCCEx_GetPeriphCLKFreq>
 8000d12:	4603      	mov	r3, r0
 8000d14:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6919      	ldr	r1, [r3, #16]
 8000d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e4c <HAL_ADC_PollForConversion+0x1f8>)
 8000d20:	400b      	ands	r3, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d118      	bne.n	8000d58 <HAL_ADC_PollForConversion+0x104>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68d9      	ldr	r1, [r3, #12]
 8000d2c:	4b48      	ldr	r3, [pc, #288]	@ (8000e50 <HAL_ADC_PollForConversion+0x1fc>)
 8000d2e:	400b      	ands	r3, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d111      	bne.n	8000d58 <HAL_ADC_PollForConversion+0x104>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6919      	ldr	r1, [r3, #16]
 8000d3a:	4b46      	ldr	r3, [pc, #280]	@ (8000e54 <HAL_ADC_PollForConversion+0x200>)
 8000d3c:	400b      	ands	r3, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d108      	bne.n	8000d54 <HAL_ADC_PollForConversion+0x100>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68d9      	ldr	r1, [r3, #12]
 8000d48:	4b43      	ldr	r3, [pc, #268]	@ (8000e58 <HAL_ADC_PollForConversion+0x204>)
 8000d4a:	400b      	ands	r3, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_ADC_PollForConversion+0x100>
 8000d50:	2314      	movs	r3, #20
 8000d52:	e020      	b.n	8000d96 <HAL_ADC_PollForConversion+0x142>
 8000d54:	2329      	movs	r3, #41	@ 0x29
 8000d56:	e01e      	b.n	8000d96 <HAL_ADC_PollForConversion+0x142>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6919      	ldr	r1, [r3, #16]
 8000d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e54 <HAL_ADC_PollForConversion+0x200>)
 8000d60:	400b      	ands	r3, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <HAL_ADC_PollForConversion+0x120>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68d9      	ldr	r1, [r3, #12]
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e58 <HAL_ADC_PollForConversion+0x204>)
 8000d6e:	400b      	ands	r3, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00d      	beq.n	8000d90 <HAL_ADC_PollForConversion+0x13c>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6919      	ldr	r1, [r3, #16]
 8000d7a:	4b38      	ldr	r3, [pc, #224]	@ (8000e5c <HAL_ADC_PollForConversion+0x208>)
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d108      	bne.n	8000d94 <HAL_ADC_PollForConversion+0x140>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68d9      	ldr	r1, [r3, #12]
 8000d88:	4b34      	ldr	r3, [pc, #208]	@ (8000e5c <HAL_ADC_PollForConversion+0x208>)
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <HAL_ADC_PollForConversion+0x140>
 8000d90:	2354      	movs	r3, #84	@ 0x54
 8000d92:	e000      	b.n	8000d96 <HAL_ADC_PollForConversion+0x142>
 8000d94:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d9c:	e021      	b.n	8000de2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d01a      	beq.n	8000ddc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d007      	beq.n	8000dbc <HAL_ADC_PollForConversion+0x168>
 8000dac:	f7ff fdac 	bl	8000908 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d20f      	bcs.n	8000ddc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d90b      	bls.n	8000ddc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc8:	f043 0204 	orr.w	r2, r3, #4
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e030      	b.n	8000e3e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d8d9      	bhi.n	8000d9e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f06f 0212 	mvn.w	r2, #18
 8000df2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e0a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e0e:	d115      	bne.n	8000e3c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d111      	bne.n	8000e3c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d105      	bne.n	8000e3c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e34:	f043 0201 	orr.w	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	371c      	adds	r7, #28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000018 	.word	0x20000018
 8000e4c:	24924924 	.word	0x24924924
 8000e50:	00924924 	.word	0x00924924
 8000e54:	12492492 	.word	0x12492492
 8000e58:	00492492 	.word	0x00492492
 8000e5c:	00249249 	.word	0x00249249

08000e60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d101      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x20>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e0dc      	b.n	8001052 <HAL_ADC_ConfigChannel+0x1da>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b06      	cmp	r3, #6
 8000ea6:	d81c      	bhi.n	8000ee2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3b05      	subs	r3, #5
 8000eba:	221f      	movs	r2, #31
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	4019      	ands	r1, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3b05      	subs	r3, #5
 8000ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ee0:	e03c      	b.n	8000f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b0c      	cmp	r3, #12
 8000ee8:	d81c      	bhi.n	8000f24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	3b23      	subs	r3, #35	@ 0x23
 8000efc:	221f      	movs	r2, #31
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4019      	ands	r1, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	3b23      	subs	r3, #35	@ 0x23
 8000f16:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f22:	e01b      	b.n	8000f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	3b41      	subs	r3, #65	@ 0x41
 8000f36:	221f      	movs	r2, #31
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b41      	subs	r3, #65	@ 0x41
 8000f50:	fa00 f203 	lsl.w	r2, r0, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	d91c      	bls.n	8000f9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68d9      	ldr	r1, [r3, #12]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	3b1e      	subs	r3, #30
 8000f76:	2207      	movs	r2, #7
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4019      	ands	r1, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6898      	ldr	r0, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3b1e      	subs	r3, #30
 8000f90:	fa00 f203 	lsl.w	r2, r0, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	e019      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6919      	ldr	r1, [r3, #16]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	2207      	movs	r2, #7
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4019      	ands	r1, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	6898      	ldr	r0, [r3, #8]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d003      	beq.n	8000fe2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fde:	2b11      	cmp	r3, #17
 8000fe0:	d132      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800105c <HAL_ADC_ConfigChannel+0x1e4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d125      	bne.n	8001038 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d126      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001008:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b10      	cmp	r3, #16
 8001010:	d11a      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001012:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <HAL_ADC_ConfigChannel+0x1e8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a13      	ldr	r2, [pc, #76]	@ (8001064 <HAL_ADC_ConfigChannel+0x1ec>)
 8001018:	fba2 2303 	umull	r2, r3, r2, r3
 800101c:	0c9a      	lsrs	r2, r3, #18
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001028:	e002      	b.n	8001030 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3b01      	subs	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f9      	bne.n	800102a <HAL_ADC_ConfigChannel+0x1b2>
 8001036:	e007      	b.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103c:	f043 0220 	orr.w	r2, r3, #32
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40012400 	.word	0x40012400
 8001060:	20000018 	.word	0x20000018
 8001064:	431bde83 	.word	0x431bde83

08001068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b01      	cmp	r3, #1
 8001084:	d040      	beq.n	8001108 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0201 	orr.w	r2, r2, #1
 8001094:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <ADC_Enable+0xac>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a1f      	ldr	r2, [pc, #124]	@ (8001118 <ADC_Enable+0xb0>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	0c9b      	lsrs	r3, r3, #18
 80010a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010a4:	e002      	b.n	80010ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010b2:	f7ff fc29 	bl	8000908 <HAL_GetTick>
 80010b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010b8:	e01f      	b.n	80010fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010ba:	f7ff fc25 	bl	8000908 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d918      	bls.n	80010fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d011      	beq.n	80010fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010da:	f043 0210 	orr.w	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e007      	b.n	800110a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d1d8      	bne.n	80010ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000018 	.word	0x20000018
 8001118:	431bde83 	.word	0x431bde83

0800111c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b01      	cmp	r3, #1
 8001134:	d12e      	bne.n	8001194 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001146:	f7ff fbdf 	bl	8000908 <HAL_GetTick>
 800114a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800114c:	e01b      	b.n	8001186 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800114e:	f7ff fbdb 	bl	8000908 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d914      	bls.n	8001186 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10d      	bne.n	8001186 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116e:	f043 0210 	orr.w	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e007      	b.n	8001196 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b01      	cmp	r3, #1
 8001192:	d0dc      	beq.n	800114e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	@ (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff90 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff49 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff5e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff90 	bl	8001258 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5f 	bl	8001204 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffb0 	bl	80012bc <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b08b      	sub	sp, #44	@ 0x2c
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137a:	e169      	b.n	8001650 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800137c:	2201      	movs	r2, #1
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 8158 	bne.w	800164a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a9a      	ldr	r2, [pc, #616]	@ (8001608 <HAL_GPIO_Init+0x2a0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d05e      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013a4:	4a98      	ldr	r2, [pc, #608]	@ (8001608 <HAL_GPIO_Init+0x2a0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d875      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013aa:	4a98      	ldr	r2, [pc, #608]	@ (800160c <HAL_GPIO_Init+0x2a4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d058      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013b0:	4a96      	ldr	r2, [pc, #600]	@ (800160c <HAL_GPIO_Init+0x2a4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d86f      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013b6:	4a96      	ldr	r2, [pc, #600]	@ (8001610 <HAL_GPIO_Init+0x2a8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d052      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013bc:	4a94      	ldr	r2, [pc, #592]	@ (8001610 <HAL_GPIO_Init+0x2a8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d869      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013c2:	4a94      	ldr	r2, [pc, #592]	@ (8001614 <HAL_GPIO_Init+0x2ac>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d04c      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013c8:	4a92      	ldr	r2, [pc, #584]	@ (8001614 <HAL_GPIO_Init+0x2ac>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d863      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013ce:	4a92      	ldr	r2, [pc, #584]	@ (8001618 <HAL_GPIO_Init+0x2b0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d046      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
 80013d4:	4a90      	ldr	r2, [pc, #576]	@ (8001618 <HAL_GPIO_Init+0x2b0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d85d      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013da:	2b12      	cmp	r3, #18
 80013dc:	d82a      	bhi.n	8001434 <HAL_GPIO_Init+0xcc>
 80013de:	2b12      	cmp	r3, #18
 80013e0:	d859      	bhi.n	8001496 <HAL_GPIO_Init+0x12e>
 80013e2:	a201      	add	r2, pc, #4	@ (adr r2, 80013e8 <HAL_GPIO_Init+0x80>)
 80013e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e8:	08001463 	.word	0x08001463
 80013ec:	0800143d 	.word	0x0800143d
 80013f0:	0800144f 	.word	0x0800144f
 80013f4:	08001491 	.word	0x08001491
 80013f8:	08001497 	.word	0x08001497
 80013fc:	08001497 	.word	0x08001497
 8001400:	08001497 	.word	0x08001497
 8001404:	08001497 	.word	0x08001497
 8001408:	08001497 	.word	0x08001497
 800140c:	08001497 	.word	0x08001497
 8001410:	08001497 	.word	0x08001497
 8001414:	08001497 	.word	0x08001497
 8001418:	08001497 	.word	0x08001497
 800141c:	08001497 	.word	0x08001497
 8001420:	08001497 	.word	0x08001497
 8001424:	08001497 	.word	0x08001497
 8001428:	08001497 	.word	0x08001497
 800142c:	08001445 	.word	0x08001445
 8001430:	08001459 	.word	0x08001459
 8001434:	4a79      	ldr	r2, [pc, #484]	@ (800161c <HAL_GPIO_Init+0x2b4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800143a:	e02c      	b.n	8001496 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	623b      	str	r3, [r7, #32]
          break;
 8001442:	e029      	b.n	8001498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	3304      	adds	r3, #4
 800144a:	623b      	str	r3, [r7, #32]
          break;
 800144c:	e024      	b.n	8001498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	3308      	adds	r3, #8
 8001454:	623b      	str	r3, [r7, #32]
          break;
 8001456:	e01f      	b.n	8001498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	330c      	adds	r3, #12
 800145e:	623b      	str	r3, [r7, #32]
          break;
 8001460:	e01a      	b.n	8001498 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800146a:	2304      	movs	r3, #4
 800146c:	623b      	str	r3, [r7, #32]
          break;
 800146e:	e013      	b.n	8001498 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001478:	2308      	movs	r3, #8
 800147a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	611a      	str	r2, [r3, #16]
          break;
 8001482:	e009      	b.n	8001498 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001484:	2308      	movs	r3, #8
 8001486:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	615a      	str	r2, [r3, #20]
          break;
 800148e:	e003      	b.n	8001498 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
          break;
 8001494:	e000      	b.n	8001498 <HAL_GPIO_Init+0x130>
          break;
 8001496:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2bff      	cmp	r3, #255	@ 0xff
 800149c:	d801      	bhi.n	80014a2 <HAL_GPIO_Init+0x13a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	e001      	b.n	80014a6 <HAL_GPIO_Init+0x13e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3304      	adds	r3, #4
 80014a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2bff      	cmp	r3, #255	@ 0xff
 80014ac:	d802      	bhi.n	80014b4 <HAL_GPIO_Init+0x14c>
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	e002      	b.n	80014ba <HAL_GPIO_Init+0x152>
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	3b08      	subs	r3, #8
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	210f      	movs	r1, #15
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	401a      	ands	r2, r3
 80014cc:	6a39      	ldr	r1, [r7, #32]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	431a      	orrs	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80b1 	beq.w	800164a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001620 <HAL_GPIO_Init+0x2b8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001620 <HAL_GPIO_Init+0x2b8>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001620 <HAL_GPIO_Init+0x2b8>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001500:	4a48      	ldr	r2, [pc, #288]	@ (8001624 <HAL_GPIO_Init+0x2bc>)
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a40      	ldr	r2, [pc, #256]	@ (8001628 <HAL_GPIO_Init+0x2c0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d013      	beq.n	8001554 <HAL_GPIO_Init+0x1ec>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a3f      	ldr	r2, [pc, #252]	@ (800162c <HAL_GPIO_Init+0x2c4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d00d      	beq.n	8001550 <HAL_GPIO_Init+0x1e8>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a3e      	ldr	r2, [pc, #248]	@ (8001630 <HAL_GPIO_Init+0x2c8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d007      	beq.n	800154c <HAL_GPIO_Init+0x1e4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a3d      	ldr	r2, [pc, #244]	@ (8001634 <HAL_GPIO_Init+0x2cc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d101      	bne.n	8001548 <HAL_GPIO_Init+0x1e0>
 8001544:	2303      	movs	r3, #3
 8001546:	e006      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001548:	2304      	movs	r3, #4
 800154a:	e004      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 800154c:	2302      	movs	r3, #2
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001554:	2300      	movs	r3, #0
 8001556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001566:	492f      	ldr	r1, [pc, #188]	@ (8001624 <HAL_GPIO_Init+0x2bc>)
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001580:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	492c      	ldr	r1, [pc, #176]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800158e:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	4928      	ldr	r1, [pc, #160]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 8001598:	4013      	ands	r3, r2
 800159a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015a8:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	4922      	ldr	r1, [pc, #136]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60cb      	str	r3, [r1, #12]
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015b6:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	43db      	mvns	r3, r3
 80015be:	491e      	ldr	r1, [pc, #120]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4918      	ldr	r1, [pc, #96]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015de:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4914      	ldr	r1, [pc, #80]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d021      	beq.n	800163c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	490e      	ldr	r1, [pc, #56]	@ (8001638 <HAL_GPIO_Init+0x2d0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
 8001604:	e021      	b.n	800164a <HAL_GPIO_Init+0x2e2>
 8001606:	bf00      	nop
 8001608:	10320000 	.word	0x10320000
 800160c:	10310000 	.word	0x10310000
 8001610:	10220000 	.word	0x10220000
 8001614:	10210000 	.word	0x10210000
 8001618:	10120000 	.word	0x10120000
 800161c:	10110000 	.word	0x10110000
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	40010800 	.word	0x40010800
 800162c:	40010c00 	.word	0x40010c00
 8001630:	40011000 	.word	0x40011000
 8001634:	40011400 	.word	0x40011400
 8001638:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_GPIO_Init+0x304>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	43db      	mvns	r3, r3
 8001644:	4909      	ldr	r1, [pc, #36]	@ (800166c <HAL_GPIO_Init+0x304>)
 8001646:	4013      	ands	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	3301      	adds	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	fa22 f303 	lsr.w	r3, r2, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	f47f ae8e 	bne.w	800137c <HAL_GPIO_Init+0x14>
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	372c      	adds	r7, #44	@ 0x2c
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e001      	b.n	8001692 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	460b      	mov	r3, r1
 80016a8:	807b      	strh	r3, [r7, #2]
 80016aa:	4613      	mov	r3, r2
 80016ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ae:	787b      	ldrb	r3, [r7, #1]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b4:	887a      	ldrh	r2, [r7, #2]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016ba:	e003      	b.n	80016c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	041a      	lsls	r2, r3, #16
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	611a      	str	r2, [r3, #16]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e272      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8087 	beq.w	80017fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f0:	4b92      	ldr	r3, [pc, #584]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d00c      	beq.n	8001716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016fc:	4b8f      	ldr	r3, [pc, #572]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d112      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
 8001708:	4b8c      	ldr	r3, [pc, #560]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001714:	d10b      	bne.n	800172e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	4b89      	ldr	r3, [pc, #548]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d06c      	beq.n	80017fc <HAL_RCC_OscConfig+0x12c>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d168      	bne.n	80017fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e24c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x76>
 8001738:	4b80      	ldr	r3, [pc, #512]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a7f      	ldr	r2, [pc, #508]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b7b      	ldr	r3, [pc, #492]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7a      	ldr	r2, [pc, #488]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b78      	ldr	r3, [pc, #480]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a77      	ldr	r2, [pc, #476]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0xbc>
 8001772:	4b72      	ldr	r3, [pc, #456]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a71      	ldr	r2, [pc, #452]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b6f      	ldr	r3, [pc, #444]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xd4>
 800178c:	4b6b      	ldr	r3, [pc, #428]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6a      	ldr	r2, [pc, #424]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b68      	ldr	r3, [pc, #416]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a67      	ldr	r2, [pc, #412]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff f8ac 	bl	8000908 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff f8a8 	bl	8000908 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	@ 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e200      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b5d      	ldr	r3, [pc, #372]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe4>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff f898 	bl	8000908 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff f894 	bl	8000908 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1ec      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x10c>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d063      	beq.n	80018d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180a:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001816:	4b49      	ldr	r3, [pc, #292]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d11c      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
 8001822:	4b46      	ldr	r3, [pc, #280]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	4b43      	ldr	r3, [pc, #268]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e1c0      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4939      	ldr	r1, [pc, #228]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e03a      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4b36      	ldr	r3, [pc, #216]	@ (8001940 <HAL_RCC_OscConfig+0x270>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f84d 	bl	8000908 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff f849 	bl	8000908 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1a1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4927      	ldr	r1, [pc, #156]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <HAL_RCC_OscConfig+0x270>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff f82c 	bl	8000908 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff f828 	bl	8000908 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e180      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03a      	beq.n	8001954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d019      	beq.n	800191a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e6:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <HAL_RCC_OscConfig+0x274>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff f80c 	bl	8000908 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff f808 	bl	8000908 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e160      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_RCC_OscConfig+0x26c>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 fa86 	bl	8001e24 <RCC_Delay>
 8001918:	e01c      	b.n	8001954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_RCC_OscConfig+0x274>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001920:	f7fe fff2 	bl	8000908 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001926:	e00f      	b.n	8001948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001928:	f7fe ffee 	bl	8000908 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d908      	bls.n	8001948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e146      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	42420000 	.word	0x42420000
 8001944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b92      	ldr	r3, [pc, #584]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e9      	bne.n	8001928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a6 	beq.w	8001aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b8b      	ldr	r3, [pc, #556]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b88      	ldr	r3, [pc, #544]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a87      	ldr	r2, [pc, #540]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b85      	ldr	r3, [pc, #532]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b82      	ldr	r3, [pc, #520]	@ (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7fe ffaf 	bl	8000908 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7fe ffab 	bl	8000908 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	@ 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e103      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b75      	ldr	r3, [pc, #468]	@ (8001b98 <HAL_RCC_OscConfig+0x4c8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x312>
 80019d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	e02d      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x334>
 80019ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a69      	ldr	r2, [pc, #420]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b67      	ldr	r3, [pc, #412]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a66      	ldr	r2, [pc, #408]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	e01c      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x356>
 8001a0c:	4b61      	ldr	r3, [pc, #388]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a60      	ldr	r2, [pc, #384]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	4b5e      	ldr	r3, [pc, #376]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a5d      	ldr	r2, [pc, #372]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e00b      	b.n	8001a3e <HAL_RCC_OscConfig+0x36e>
 8001a26:	4b5b      	ldr	r3, [pc, #364]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	4b58      	ldr	r3, [pc, #352]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a57      	ldr	r2, [pc, #348]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d015      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7fe ff5f 	bl	8000908 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7fe ff5b 	bl	8000908 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0b1      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	4b4b      	ldr	r3, [pc, #300]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ee      	beq.n	8001a4e <HAL_RCC_OscConfig+0x37e>
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7fe ff49 	bl	8000908 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7fe ff45 	bl	8000908 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e09b      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8087 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	4b36      	ldr	r3, [pc, #216]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d061      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d146      	bne.n	8001b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b33      	ldr	r3, [pc, #204]	@ (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7fe ff19 	bl	8000908 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7fe ff15 	bl	8000908 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e06d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b06:	f023 020f 	bic.w	r2, r3, #15
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4921      	ldr	r1, [pc, #132]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b14:	4b1f      	ldr	r3, [pc, #124]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a19      	ldr	r1, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	430b      	orrs	r3, r1
 8001b26:	491b      	ldr	r1, [pc, #108]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fee9 	bl	8000908 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe fee5 	bl	8000908 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e03d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46a>
 8001b58:	e035      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_RCC_OscConfig+0x4cc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7fe fed2 	bl	8000908 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7fe fece 	bl	8000908 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e026      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x498>
 8001b86:	e01e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e019      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_RCC_OscConfig+0x500>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0a0      	b.n	8001d2a <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c00:	4b4c      	ldr	r3, [pc, #304]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a4b      	ldr	r2, [pc, #300]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c18:	4b46      	ldr	r3, [pc, #280]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a45      	ldr	r2, [pc, #276]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b43      	ldr	r3, [pc, #268]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4940      	ldr	r1, [pc, #256]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d040      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e067      	b.n	8001d2a <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e05b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e053      	b.n	8001d2a <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4929      	ldr	r1, [pc, #164]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7fe fe38 	bl	8000908 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7fe fe34 	bl	8000908 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e03b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4915      	ldr	r1, [pc, #84]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d02:	f000 f81f 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_RCC_ClockConfig+0x160>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	4909      	ldr	r1, [pc, #36]	@ (8001d38 <HAL_RCC_ClockConfig+0x164>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a08      	ldr	r2, [pc, #32]	@ (8001d3c <HAL_RCC_ClockConfig+0x168>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_RCC_ClockConfig+0x16c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fdae 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08001f80 	.word	0x08001f80
 8001d3c:	20000018 	.word	0x20000018
 8001d40:	2000001c 	.word	0x2000001c

08001d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x90>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x30>
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x36>
 8001d72:	e026      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d74:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d76:	613b      	str	r3, [r7, #16]
      break;
 8001d78:	e026      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	0c9b      	lsrs	r3, r3, #18
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	4a16      	ldr	r2, [pc, #88]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8001d84:	5cd3      	ldrb	r3, [r2, r3]
 8001d86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00f      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x90>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4a11      	ldr	r2, [pc, #68]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da4:	fb03 f202 	mul.w	r2, r3, r2
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e004      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a0b      	ldr	r2, [pc, #44]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
      break;
 8001dc0:	e002      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc4:	613b      	str	r3, [r7, #16]
      break;
 8001dc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc8:	693b      	ldr	r3, [r7, #16]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	007a1200 	.word	0x007a1200
 8001ddc:	08001f98 	.word	0x08001f98
 8001de0:	08001fa8 	.word	0x08001fa8
 8001de4:	003d0900 	.word	0x003d0900

08001de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b02      	ldr	r3, [pc, #8]	@ (8001df8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	20000018 	.word	0x20000018

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e00:	f7ff fff2 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0adb      	lsrs	r3, r3, #11
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4903      	ldr	r1, [pc, #12]	@ (8001e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08001f90 	.word	0x08001f90

08001e24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <RCC_Delay+0x34>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <RCC_Delay+0x38>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0a5b      	lsrs	r3, r3, #9
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e40:	bf00      	nop
  }
  while (Delay --);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e5a      	subs	r2, r3, #1
 8001e46:	60fa      	str	r2, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f9      	bne.n	8001e40 <RCC_Delay+0x1c>
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	20000018 	.word	0x20000018
 8001e5c:	10624dd3 	.word	0x10624dd3

08001e60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d003      	beq.n	8001e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d033      	beq.n	8001ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001e7c:	e041      	b.n	8001f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      temp_reg = RCC->BDCR;
 8001e7e:	4b23      	ldr	r3, [pc, #140]	@ (8001f0c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	60bb      	str	r3, [r7, #8]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e8e:	d108      	bne.n	8001ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        frequency = LSE_VALUE;
 8001e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e01f      	b.n	8001ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8001eae:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = LSI_VALUE;
 8001eba:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e00f      	b.n	8001ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8001ece:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        frequency = HSE_VALUE / 128U;
 8001eda:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8001ede:	60fb      	str	r3, [r7, #12]
      break;
 8001ee0:	e00e      	b.n	8001f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8001ee2:	e00d      	b.n	8001f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001ee4:	f7ff ff8a 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	0b9b      	lsrs	r3, r3, #14
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	60fb      	str	r3, [r7, #12]
      break;
 8001efe:	e000      	b.n	8001f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      break;
 8001f00:	bf00      	nop
    }
  }
  return (frequency);
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000

08001f10 <memset>:
 8001f10:	4603      	mov	r3, r0
 8001f12:	4402      	add	r2, r0
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d100      	bne.n	8001f1a <memset+0xa>
 8001f18:	4770      	bx	lr
 8001f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f1e:	e7f9      	b.n	8001f14 <memset+0x4>

08001f20 <__libc_init_array>:
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	2600      	movs	r6, #0
 8001f24:	4d0c      	ldr	r5, [pc, #48]	@ (8001f58 <__libc_init_array+0x38>)
 8001f26:	4c0d      	ldr	r4, [pc, #52]	@ (8001f5c <__libc_init_array+0x3c>)
 8001f28:	1b64      	subs	r4, r4, r5
 8001f2a:	10a4      	asrs	r4, r4, #2
 8001f2c:	42a6      	cmp	r6, r4
 8001f2e:	d109      	bne.n	8001f44 <__libc_init_array+0x24>
 8001f30:	f000 f81a 	bl	8001f68 <_init>
 8001f34:	2600      	movs	r6, #0
 8001f36:	4d0a      	ldr	r5, [pc, #40]	@ (8001f60 <__libc_init_array+0x40>)
 8001f38:	4c0a      	ldr	r4, [pc, #40]	@ (8001f64 <__libc_init_array+0x44>)
 8001f3a:	1b64      	subs	r4, r4, r5
 8001f3c:	10a4      	asrs	r4, r4, #2
 8001f3e:	42a6      	cmp	r6, r4
 8001f40:	d105      	bne.n	8001f4e <__libc_init_array+0x2e>
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f48:	4798      	blx	r3
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	e7ee      	b.n	8001f2c <__libc_init_array+0xc>
 8001f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f52:	4798      	blx	r3
 8001f54:	3601      	adds	r6, #1
 8001f56:	e7f2      	b.n	8001f3e <__libc_init_array+0x1e>
 8001f58:	08001fb8 	.word	0x08001fb8
 8001f5c:	08001fb8 	.word	0x08001fb8
 8001f60:	08001fb8 	.word	0x08001fb8
 8001f64:	08001fbc 	.word	0x08001fbc

08001f68 <_init>:
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	bf00      	nop
 8001f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6e:	bc08      	pop	{r3}
 8001f70:	469e      	mov	lr, r3
 8001f72:	4770      	bx	lr

08001f74 <_fini>:
 8001f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f76:	bf00      	nop
 8001f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7a:	bc08      	pop	{r3}
 8001f7c:	469e      	mov	lr, r3
 8001f7e:	4770      	bx	lr
